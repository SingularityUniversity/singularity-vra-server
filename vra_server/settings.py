"""
Django settings for vra_server project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import dj_database_url
import datetime

import logging

debug_var = os.environ.get('DEBUG', 'false')
if debug_var.lower() in ('false', 'no', 'f', 'n', '0'):
    DEBUG = False
else:
    DEBUG = True

ENVIRONMENT = os.environ.get('ENVIRONMENT')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

EMBEDLY_KEY = os.environ.get('EMBEDLY_KEY')

# Celery Settings
BROKER_URL = os.environ.get('BROKER_URL')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

ELASTICSEARCH_URL = os.environ.get('SEARCHBOX_SSL_URL', os.environ.get('SEARCHBOX_URL'))
ELASTICSEARCH_INDEX = os.environ.get('ELASTICSEARCH_INDEX')
ELASTICSEARCH_TYPE = "content"

S3_ACCESS_KEY_ID = os.environ.get('S3_ACCESS_KEY_ID')
S3_ACCESS_KEY_SECRET = os.environ.get('S3_ACCESS_KEY_SECRET')
S3_BUCKET = os.environ.get('S3_BUCKET')

WEBPACK_LOADER = {
    'DEFAULT': {
        'CACHE': not DEBUG,
        'BUNDLE_DIR_NAME': 'bundles/',
        'STATS_FILE': os.path.join(BASE_DIR, 'assets/webpack-stats.json'),
        'POLL_INTERVAL': 0.1,
        'IGNORE': ['.+\.hot-update.js', '.+\.map']
    }
}

if ENVIRONMENT == 'production':
    WEBPACK_LOADER['DEFAULT'].update({
        'BUNDLE_DIR_NAME': 'client-dist/',
        'STATS_FILE': os.path.join(BASE_DIR, 'assets/client-dist/webpack-stats-prod.json')
    })

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'storages',
    'rest_framework',
    'rest_framework_docs',
    'solo',
    'datetimeutc',
    'webpack_loader',
    'core.apps.CoreConfig',
    'workers',
    'web',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'vra_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vra_server.wsgi.application'

# a list of tuples. Each tuple is 2 or 3 items long
# item[0] == key in the preprocessed dictionary in the content object
# item[1] == class name of the prep
# item[2] == (optional, defaults to false) include in elastic_search indexing
CONTENT_PREPROCESSORS = [
    ('core.models.get_content_length', 'content_length', True),
    ('text.summary.get_summary_sentences', 'summary_sentences')
]


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases
if os.environ.get('ENVIRONMENT') == 'development' and \
        os.environ.get('CI') == 'true':
    # we're at codeship, so use the local database
    dsn = 'postgres://{}:{}@localhost:5434/test_promo_db'.format(os.environ.get('PG_USER'),
                                                            os.environ.get('PG_PASSWORD'))
else:
    dsn = os.environ.get('DATABASE_URL')
DATABASES = {
    'default': dj_database_url.parse(dsn)
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

APPEND_SLASH=False

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': ('rest_framework.renderers.JSONRenderer',),
    'DEFAULT_PAGINATION_CLASS': 'core.api.v1.pagination.LargeResultsLimitOffsetPagination',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
}

if os.environ.get('ENVIRONMENT') == 'production':
    timeout = 60*15
else:
    timeout = 60*60*12

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=timeout)
}


# Allow all host headers
ALLOWED_HOSTS = ['*']

STATIC_ROOT = 'static'
STATICFILES_LOCATION = 'static'
# Use S3 to server static files in production
if os.environ.get('ENVIRONMENT') == 'production':
    # S3 SETUP
    AWS_ACCESS_KEY_ID = S3_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = S3_ACCESS_KEY_SECRET
    AWS_STORAGE_BUCKET_NAME = S3_BUCKET
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
    STATICFILES_STORAGE = 'util.s3.StaticStorage'
    STATIC_URL =  'https://{}.s3.amazonaws.com/{}/'.format(S3_BUCKET, STATIC_ROOT)

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'assets'),
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
    },
}
